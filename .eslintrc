{
  "extends": [
    "eslint:recommended",
    // "hardcore",
    // "hardcore/react",
    // "hardcore/react-testing-library",
    // "hardcore/jest",
    // "hardcore/fp",
    // "hardcore/ts",
    "react-app",
    "react-app/jest",
    "plugin:flowtype/recommended",
    // "plugin:import/recommended",
    "plugin:jsx-a11y/strict",
    "plugin:jest-dom/recommended",
    "plugin:testing-library/react",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "plugin:react-perf/all", // same as recommended
    "plugin:regexp/recommended",
    "plugin:sonarjs/recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:unicorn/recommended"
  ],
  "env": {
    "browser": true
  },
  "parserOptions": {
    "project": "./tsconfig.json"
  },
  "plugins": [
    "flowtype",
    // "import",
    "jsx-a11y",
    "jest-dom",
    "testing-library",
    "react",
    "react-hooks",
    "react-perf",
    "regexp",
    "sonarjs",
    "@typescript-eslint",
    "unicorn"
  ],
  "reportUnusedDisableDirectives": true,
  "rules": {
    "no-alert": "error", // It's deprecated
    "prefer-arrow-callback": "warn",
    "prefer-const": "warn",
    "prefer-numeric-literals": "warn",
    "prefer-promise-reject-errors": "warn",
    "prefer-regex-literals": "warn",
    "prefer-rest-params": "warn",
    "prefer-spread": "warn",


    "import/no-unused-modules": "off",


    "jest/no-commented-out-tests": "warn",
    "jest/no-identical-title": "warn",
    "jest/prefer-called-with": "warn",
    "jest/prefer-expect-assertions": "off",
    "jest/prefer-hooks-on-top": "off",
    "jest/prefer-spy-on": "warn",
    "jest/prefer-strict-equal": "warn",
    "jest/prefer-to-be-null": "error",
    "jest/prefer-to-be-undefined": "error",
    "jest/prefer-to-contain": "error",
    "jest/prefer-to-have-length": "error",
    "jest/prefer-todo": "warn",
    "jest/valid-describe": "error",
    "jest/valid-expect": "error",
    "jest/valid-expect-in-promise": "error",
    "jest/valid-title": "error",


    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/no-explicit-any": "off", // Check every once in a while
    "@typescript-eslint/unbound-method": "off", // Invalid errors - methods ARE bound silly

    "@typescript-eslint/no-invalid-this": "warn",
    "@typescript-eslint/no-invalid-void-type": "warn",
    "@typescript-eslint/prefer-enum-initializers": "warn",
    "@typescript-eslint/prefer-for-of": "warn",
    "@typescript-eslint/prefer-function-type": "warn",
    "@typescript-eslint/prefer-includes": "error",
    "@typescript-eslint/prefer-literal-enum-member": "warn",
    "@typescript-eslint/prefer-nullish-coalescing": "error",
    "@typescript-eslint/prefer-optional-chain": "error",
    "@typescript-eslint/prefer-readonly": "warn",
    "@typescript-eslint/prefer-readonly-parameter-types": "off",
    "@typescript-eslint/prefer-reduce-type-parameter": "warn",
    "@typescript-eslint/prefer-string-starts-ends-with": "warn",
    "@typescript-eslint/prefer-ts-expect-error": "warn",


    "react/button-has-type": "warn",
    "react/prefer-read-only-props": "warn",


    // TODO: fix errors
    "sonarjs/cognitive-complexity": "off",


    "testing-library/await-fire-event": "warn",
    "testing-library/prefer-explicit-assert": "warn",


    "unicorn/explicit-length-check": "off",
    "unicorn/filename-case": "off",
    "unicorn/no-array-for-each": "off",
    "unicorn/no-array-reduce": "off", // git gud: .reduce((accum, current) => newAccum, startAccum)
    "unicorn/no-lonely-if": "off",
    "unicorn/no-nested-ternary": "off",
    "unicorn/no-null": "off",
    "unicorn/no-useless-undefined": "off",
    "unicorn/prefer-number-properties": "off",
    "unicorn/prefer-query-selector": "off",
    "unicorn/prefer-spread": "off", // More explicit sometimes
    "unicorn/prevent-abbreviations": "off", // If you don't understand, see here: https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/rules/shared/abbreviations.js
    "unicorn/throw-new-error": "off",


    // disabling base rules
    "no-use-before-define": "off",
    "@typescript-eslint/no-use-before-define": "error"
  },
  "settings": {
    "linkComponents": [
      "ExternalLink"
    ]
  }
}
